<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveSockets</name>
    </assembly>
    <members>
        <member name="T:ReactiveSockets.IReactiveClient">
            <summary>
            Interface implemented by the reactive client socket that can 
            connect, send data to and receive data from a server.
            </summary>
        </member>
        <member name="T:ReactiveSockets.IReactiveSocket">
            <summary>
            Low level channel between client and server.
            </summary>
        </member>
        <member name="T:ReactiveSockets.ISocket">
            <summary>
            Exposes the core SetSocketOption method from .NET sockets.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ISocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
            <summary>See <see cref="T:System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel, SocketOptionName)" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ISocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>See <see cref="T:System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel, SocketOptionName, byte[])" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ISocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>See <see cref="T:System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel, SocketOptionName, int)" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ISocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
            <summary>See <see cref="T:System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, bool)" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ISocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>See <see cref="T:System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, byte[])" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ISocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>See <see cref="T:System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, int)" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ISocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)">
            <summary>See <see cref="T:System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, object)" />.</summary>
        </member>
        <member name="M:ReactiveSockets.IReactiveSocket.SendAsync(System.Byte[])">
            <summary>
            Sends data asynchronously through this endpoint.
            </summary>
        </member>
        <member name="M:ReactiveSockets.IReactiveSocket.SendAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sends data asynchronously through this endpoint, with support 
            for cancellation.
            </summary>
        </member>
        <member name="E:ReactiveSockets.IReactiveSocket.Connected">
            <summary>
            Raised when the socket is connected.
            </summary>
        </member>
        <member name="E:ReactiveSockets.IReactiveSocket.Disconnected">
            <summary>
            Raised when the socket is disconnected.
            </summary>
        </member>
        <member name="E:ReactiveSockets.IReactiveSocket.Disposed">
            <summary>
            Raised when the socket is disposed.
            </summary>
        </member>
        <member name="P:ReactiveSockets.IReactiveSocket.IsConnected">
            <summary>
            Gets whether the socket is connected.
            </summary>
        </member>
        <member name="P:ReactiveSockets.IReactiveSocket.Receiver">
            <summary>
            Observable bytes that are being received by this endpoint. Note that 
            subscribing to the receiver blocks until a byte is received, so 
            subscribers will typically use the extension method <c>SubscribeOn</c> 
            to specify the scheduler to use for subscription.
            </summary>
            <remarks>
            This blocking characteristic also propagates to higher level channels built 
            on top of this socket, but it's not necessary to use SubscribeOn 
            at more than one level.
            </remarks>
        </member>
        <member name="P:ReactiveSockets.IReactiveSocket.Sender">
            <summary>
            Observable bytes that are being sent through this endpoint 
            by using the <see cref="M:ReactiveSockets.IReactiveSocket.SendAsync(System.Byte[])"/> or 
            <see cref="M:ReactiveSockets.IReactiveSocket.SendAsync(System.Byte[],System.Threading.CancellationToken)"/>  methods. 
            Non-blocking.
            </summary>
        </member>
        <member name="M:ReactiveSockets.IReactiveClient.ConnectAsync">
            <summary>
            Attempts to connect to a server.
            </summary>
        </member>
        <member name="M:ReactiveSockets.IReactiveClient.Disconnect">
            <summary>
            Disconnects the underlying connection to the server.
            </summary>
        </member>
        <member name="T:ReactiveSockets.IReactiveListener">
            <summary>
            Interface implemented by the reactive listeners which can 
            accept incoming connections.
            </summary>
        </member>
        <member name="M:ReactiveSockets.IReactiveListener.Dispose">
            <summary>
            Disposes the listener, releasing all resources and closing 
            any active connections.
            </summary>
        </member>
        <member name="M:ReactiveSockets.IReactiveListener.Start">
            <summary>
            Starts accepting connections.
            </summary>
        </member>
        <member name="P:ReactiveSockets.IReactiveListener.Connections">
            <summary>
            Observable connections that are being accepted by the listener.
            </summary>
        </member>
        <member name="T:ReactiveSockets.ISocketExtensions">
            <summary>
            Provides easy configuration of socket options via properties.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ISocketExtensions.IpOptions(ReactiveSockets.ISocket)">
            <summary>
            Retrieves the IP options available for the socket.
            </summary>
        </member>
        <member name="T:ReactiveSockets.ISocketExtensions.ISocketOptions">
            <summary>
            Exposes the well-known options that can be set for a socket.
            </summary>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.DontFragment">
            <summary>Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> allows Internet Protocol (IP) datagrams to be fragmented.</summary>
            <returns>true if the <see cref="T:System.Net.Sockets.Socket" /> allows datagram fragmentation; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.DualMode">
            <returns>Returns <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.EnableBroadcast">
            <summary>Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> can send or receive broadcast packets.</summary>
            <returns>true if the <see cref="T:System.Net.Sockets.Socket" /> allows broadcast packets; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.ExclusiveAddressUse">
            <summary>Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> allows only one process to bind to a port.</summary>
            <returns>true if the <see cref="T:System.Net.Sockets.Socket" /> allows only one socket to bind to a specific port; otherwise, false. The default is true for Windows Server 2003 and Windows XP Service Pack 2, and false for all other versions.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.LingerState">
            <summary>Gets or sets a value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> will delay closing a socket in an attempt to send all pending data.</summary>
            <returns>A <see cref="T:System.Net.Sockets.LingerOption" /> that specifies how to linger while closing a socket.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.MulticastLoopback">
            <summary>Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.</summary>
            <returns>true if the <see cref="T:System.Net.Sockets.Socket" /> receives outgoing multicast packets; otherwise, false.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.NoDelay">
            <summary>Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the stream <see cref="T:System.Net.Sockets.Socket" /> is using the Nagle algorithm.</summary>
            <returns>false if the <see cref="T:System.Net.Sockets.Socket" /> uses the Nagle algorithm; otherwise, true. The default is false.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.ReceiveBufferSize">
            <summary>Gets or sets a value that specifies the size of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" />.</summary>
            <returns>An <see cref="T:System.Int32" /> that contains the size, in bytes, of the receive buffer. The default is 8192.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.ReceiveTimeout">
            <summary>Gets or sets a value that specifies the amount of time after which a synchronous <see cref="T:System.Net.Sockets.Socket.Receive" /> call will time out.</summary>
            <returns>The time-out value, in milliseconds. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.SendBufferSize">
            <summary>Gets or sets a value that specifies the size of the send buffer of the <see cref="T:System.Net.Sockets.Socket" />.</summary>
            <returns>An <see cref="T:System.Int32" /> that contains the size, in bytes, of the send buffer. The default is 8192.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.SendTimeout">
            <summary>Gets or sets a value that specifies the amount of time after which a synchronous <see cref="T:System.Net.Sockets.Socket.Send" /> call will time out.</summary>
            <returns>The time-out value, in milliseconds. If you set the property with a value between 1 and 499, the value will be changed to 500. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.</returns>
        </member>
        <member name="P:ReactiveSockets.ISocketExtensions.ISocketOptions.Ttl">
            <summary>Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.Socket" />.</summary>
            <returns>The TTL value.</returns>
        </member>
        <member name="T:StringFormatWithExtension">
            <summary>
            Requires a reference to System.Web.
            </summary>
        </member>
        <member name="M:StringFormatWithExtension.FormatWith(System.String,System.Object)">
            <summary>
            Formats the string with the given source object. 
            Expression like {Id} are replaced with the corresponding 
            property value in the <paramref name="source"/>. Supports 
            all <see cref="M:System.Web.UI.DataBinder.Eval(System.Object,System.String)"/> expressions formats 
            for property access.
            </summary>
        </member>
        <member name="T:ReactiveSockets.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ReactiveSockets.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ReactiveSockets.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ReactiveSockets.Properties.Resources.TcpClientSocket_DisconnectingNotConnected">
            <summary>
              Looks up a localized string similar to Cannot disconnect a disconnected socket..
            </summary>
        </member>
        <member name="T:ReactiveSockets.Properties.Strings">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="T:ReactiveSockets.Properties.Strings.TcpClientSocket">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="P:ReactiveSockets.Properties.Strings.TcpClientSocket.DisconnectingNotConnected">
            <summary>
            Looks up a localized string similar to: 
            Cannot disconnect a disconnected socket.
            </summary>
        </member>
        <member name="T:ReactiveSockets.ReactiveClient">
            <summary>
            Implements the <see cref="T:ReactiveSockets.IReactiveClient"/> over TCP.
            </summary>
        </member>
        <member name="T:ReactiveSockets.ReactiveSocket">
            <summary>
            Implements the reactive socket base class, which is used 
            on the <see cref="T:ReactiveSockets.IReactiveListener"/> for accepted connections, 
            as well as a base class for the <see cref="T:ReactiveSockets.ReactiveClient"/>.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Initializes the socket with a previously accepted TCP 
            client connection. This overload is used by the <see cref="T:ReactiveSockets.ReactiveListener"/>.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.#ctor">
            <summary>
            Protected constructor used by <see cref="T:ReactiveSockets.ReactiveClient"/> 
            client.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.GetStream">
            <summary>
            Gets the TcpClient stream to use. 
            </summary>
            <remarks>Virtual so it can be overridden to implement SSL</remarks>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.Connect(System.Net.Sockets.TcpClient)">
            <summary>
            Connects the reactive socket using the given TCP client.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.Disconnect">
            <summary>
            Disconnects the reactive socket. Throws if not currently connected.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.Disconnect(System.Boolean)">
            <summary>
            Disconnects the socket, specifying if this is being called 
            from Dispose.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.Dispose">
            <summary>
            Disconnects the socket and releases all resources.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.SendAsync(System.Byte[])">
            <summary>
            Sends data asynchronously through this endpoint.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.SendAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sends data asynchronously through this endpoint, with support 
            for cancellation.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
            <summary>See <see cref="T:System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel, SocketOptionName)" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>See <see cref="T:System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel, SocketOptionName, byte[])" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>See <see cref="T:System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel, SocketOptionName, int)" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
            <summary>See <see cref="T:System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, bool)" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>See <see cref="T:System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, byte[])" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>See <see cref="T:System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, int)" />.</summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)">
            <summary>See <see cref="T:System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, object)" />.</summary>
        </member>
        <member name="E:ReactiveSockets.ReactiveSocket.Connected">
            <summary>
            Raised when the socket is connected.
            </summary>
        </member>
        <member name="E:ReactiveSockets.ReactiveSocket.Disconnected">
            <summary>
            Raised when the socket is disconnected.
            </summary>
        </member>
        <member name="E:ReactiveSockets.ReactiveSocket.Disposed">
            <summary>
            Raised when the socket is disposed.
            </summary>
        </member>
        <member name="P:ReactiveSockets.ReactiveSocket.IsConnected">
            <summary>
            Gets whether the socket is connected.
            </summary>
        </member>
        <member name="P:ReactiveSockets.ReactiveSocket.Receiver">
            <summary>
            Observable bytes that are being received by this endpoint. Note that 
            subscribing to the receiver blocks until a byte is received, so 
            subscribers will typically use the extension method <c>SubscribeOn</c> 
            to specify the scheduler to use for subscription.
            </summary>
            <remarks>
            This blocking characteristic also propagates to higher level channels built 
            on top of this socket, but it's not necessary to use SubscribeOn 
            at more than one level.
            </remarks>
        </member>
        <member name="P:ReactiveSockets.ReactiveSocket.Sender">
            <summary>
            Observable bytes that are being sent through this endpoint 
            by using the <see cref="M:ReactiveSockets.ReactiveSocket.SendAsync(System.Byte[])"/> or 
            <see cref="M:ReactiveSockets.ReactiveSocket.SendAsync(System.Byte[],System.Threading.CancellationToken)"/>  methods.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes the reactive client.
            </summary>
            <param name="hostname">The host name or IP address of the TCP server to connect to.</param>
            <param name="port">The port to connect to.</param>
        </member>
        <member name="M:ReactiveSockets.ReactiveClient.#ctor(System.String,System.Int32,System.Func{System.IO.Stream,System.IO.Stream})">
            <summary>
            Initializes the reactive client using a custom stream transform.
            This transform allows using SslStream to provide a secure communication channel to a server
            that requires SSL.
            </summary>
            <param name="hostname">The host name or IP address of the TCP server to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="streamTransform">The callback function to use to obtain the communication <see cref="T:System.IO.Stream"/>.
            The callback is passed the original Stream from the underlying <see cref="T:System.Net.Sockets.TcpClient"/>.</param>
            <example>
            Using with SSL:
            <code>
            var client  = new ReactiveClient(host, port, stream =&gt; {
              var ssl = new SslStream(
                stream, 
                userCertificateValidationCallback: (sender, certificate, chain, errors) =&gt; true  // ignore SSL cert validation
              );
              ssl.AuthenticateAsClient(host);
              return ssl;
            } 
            </code>
            </example>
        </member>
        <member name="M:ReactiveSockets.ReactiveClient.ConnectAsync">
            <summary>
            Attemps to connect to the TCP server.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveClient.Disconnect">
            <summary>
            Disconnects the underlying TCP socket.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveClient.GetStream">
            <summary>
            Invoke the streamTransform callback to provide a stream to the underlying read/write methods.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ReactiveSockets.ReactiveListener">
            <summary>
            Implements a TCP listener.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveListener.#ctor(System.Int32)">
            <summary>
            Initializes the listener with the given port.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveListener.Dispose">
            <summary>
            Disposes the listener, releasing all resources and closing 
            any active connections.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveListener.Start">
            <summary>
            Starts accepting connections.
            </summary>
        </member>
        <member name="P:ReactiveSockets.ReactiveListener.Connections">
            <summary>
            Observable connections that are being accepted by the listener.
            </summary>
        </member>
        <member name="T:ReactiveSockets.ReactiveListenerSettings">
            <summary>
            Basic listener settings.
            </summary>
        </member>
        <member name="M:ReactiveSockets.ReactiveListenerSettings.#ctor(System.Int32)">
            <summary>
            Initializes the listener settings with the given port.
            </summary>
            <param name="port">Port to listen on.</param>
        </member>
        <member name="M:ReactiveSockets.ReactiveListenerSettings.ToString">
            <summary>
            Returns a human-readable representation of the settings.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ReactiveSockets.ReactiveListenerSettings.Port">
            <summary>
            Port to listen on.
            </summary>
        </member>
    </members>
</doc>
