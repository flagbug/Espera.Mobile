{"Name":"Google Analytics","Id":520,"Alias":"googleanalytics","Description":"#Optimize Your Business Using the Google Analytics Platform\n\nThe Google Analytics Platform lets you measure user interactions with your business across various devices and environments, at Google speed and scale.\nGain new insights and optimize the performance of your business.\n\nThe platform provides all the computing resources to collect, store, process, and report on these user-interactions.\n\n#Platform Components\n\nDevelopers interact and influence processing through a rich user interface, client libraries, and APIs that are organized into 4 main components: collection configuration, processing, and reporting. The following diagram describes the relationships between the components and APIs:\n\n\n\n* **Collection** – collects user-interaction data.\n* **Configuration** – allows you to manage how the data is processed.\n* **Processing** – processes the user-interaction data, with the configuration data.\n* **Reporting** – provides access to all the processed data.\n\n#Use it in your Xamarin Apps\n\nThis component will allow you to collect user-interaction data in your **Xamarin.iOS** and **Xamarin.Android** Applications so you can take advantage of the Google Analytics Platform.\n\n\n###### The [original content material](https://developers.google.com/analytics/devguides/platform/) of this page is licensed under the [Creative Commons Attribution 3.0 License](http://creativecommons.org/licenses/by/3.0/) and has been adapted to match this page format.\n\n","Version":"3.0.3","Summary":"Google Mobile App Analytics enables the measurement of user acquisition, engagement, and outcomes in native mobile apps.","QuickStart":"# Get your Google Analytics Tracking Id\n\nFollow the instructions in [this page](https://support.google.com/analytics/answer/2614741) to set up and get the tracking ID for a new app property in either a new or existing Google Analytics account.\n\n# iOS Getting Started\n\nThere are two steps to getting started with the iOS SDK:\n\n1. Initialize the tracker\n2. Add screen measurement\n\nAfter completing these steps, you\u0027ll be able to measure the following with Google Analytics:\n\n* App installations\n* Active users and demographics\n* Screens and user engagement\n* Crashes and exceptions\n\n## Initializing the tracker\n\nTo initialize the tracker, use the `GoogleAnalytics.iOS` namespace in your AppDelegate and add this code to your AppDelegate\u0027s `FinishedLaunching` method:\n\n```csharp\nusing GoogleAnalytics.iOS;\n//...\n\n// Shared GA tracker\npublic IGAITracker Tracker;\n\n// Learn how to get your own Tracking Id from:\n// https://support.google.com/analytics/answer/2614741?hl=en\npublic static readonly string TrackingId = \"UA-TRACKING-ID\";\n\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n{\n\n\t// Optional: set Google Analytics dispatch interval to e.g. 20 seconds.\n\tGAI.SharedInstance.DispatchInterval = 20;\n\t\n\t// Optional: automatically send uncaught exceptions to Google Analytics.\n\tGAI.SharedInstance.TrackUncaughtExceptions = true;\n\t\n\t// Initialize tracker.\n\tTracker = GAI.SharedInstance.GetTracker (TrackingId);\n}\n```\n\n**Note**: When you obtain a tracker for a given tracking Id, the tracker instance is persisted in the library. When you call `GetTracker` with the same tracking Id later, the same tracker instance will be returned. Also, the Google Analytics SDK exposes a default tracker instance that gets set to the first tracker instance created. It can be accessed by:\n\n```csharp\nGAI.SharedInstance.DefaultTracker\n```\n\nNote that in the above example, \"UA-TRACKING-ID\" here is a placeholder for the tracking ID assigned to you when you created your Google Analytics property. If you are only using one property ID in your app, using the default tracker method is best.\n\n## Implementing screen measurement\n\nTo implement it you must provide the view name to be used in your Google Analytics reports. A good place to put this is the view controller\u0027s initializer method, if you have one, or the `ViewDidAppear` method:\n\n```csharp\nusing GoogleAnalytics.iOS;\n//...\n\npublic override void ViewDidAppear (bool animated)\n{\n\tbase.ViewDidAppear (animated);\n\t\n\t// This screen name value will remain set on the tracker and sent with\n\t// hits until it is set to a new value or to null.\n\tGAI.SharedInstance.DefaultTracker.Set (GAIConstants.ScreenName, \"Main View\");\n\n\tGAI.SharedInstance.DefaultTracker.Send (GAIDictionaryBuilder.CreateAppView ().Build ());\n}\n```\n\n**Note**: `GAIConstants` is a static class containing all the constants you can set in the `Set` method from the `GAIDictionaryBuilder` class.\n\nTo learn more about screen measurement, see the [Screens Developer Guide](https://developers.google.com/analytics/devguides/collection/ios/v3/screens).\n\nCongratulations! Your Xamarin.iOS app is now setup to send data to Google Analytics.\n\n## Next steps\n\nYou can do much more with Google Analytics, including measuring campaigns, in-app payments and transactions, and user interaction events. See the following developer guides to learn how to add these features to your implementation:\n\n* [Advanced Configuration](https://developers.google.com/analytics/devguides/collection/ios/v3/advanced) – Learn more about advanced configuration options, including using multiple trackers.\n* [Measuring Campaigns](https://developers.google.com/analytics/devguides/collection/ios/v3/campaigns) – Learn how to implement campaign measurement to understand which channels and campaigns are driving app installs.\n* [Measuring Events](https://developers.google.com/analytics/devguides/collection/ios/v3/events) – Learn how to measure user engagement with interactive content like buttons, videos, and other media using Events.\n* [Measuring In-App Payments](https://developers.google.com/analytics/devguides/collection/ios/v3/ecommerce) – Learn how to measure in-app payments and transactions.\n* [User timings](https://developers.google.com/analytics/devguides/collection/ios/v3/usertimings) – Learn how to measure user timings in your app to measure load times, engagement with media, and more.\n\n# Android Getting Started\n\nThere are three steps to getting started with the Android SDK:\n\n1. Update AndroidManifest.xml\n2. Add EasyTracker methods\n3. Create your analytics.xml file\n\nAfter completing these steps, you\u0027ll be able to measure the following with Google Analytics:\n\n* App installations\n* Active users and demographics\n* Screens and user engagement\n* Crashes and exceptions\n\n## Updating AndroidManifest.xml\n\nUpdate your `AndroidManifest.xml` file by adding the following permissions:\n\n```xml\n\u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /\u003e\n```\n\n## Adding EasyTracker methods\n\nAdd the send methods to the `onStart()` and `onStop()` methods of each of your Activities as in the following example:\n\n```csharp\nusing Google.Analytics.Tracking;\n//...\n\nprotected override void OnStart ()\n{\n\tbase.OnStart ();\n\n\t// Setup Google Analytics Easy Tracker\n\tEasyTracker.GetInstance (this).ActivityStart (this);\n\n\t// By default, data is dispatched from the Google Analytics SDK for Android every 30 minutes.\n\t// You can override this by setting the dispatch period in seconds.\n\tGAServiceManager.Instance.SetLocalDispatchPeriod (5);\n}\n\nprotected override void OnStop ()\n{\n\tbase.OnStop ();\n\n\t// Stop Google Analytics Easy Tracker\n\tEasyTracker.GetInstance (this).ActivityStop (this);\n}\n```\n\n## Creating your analytics.xml file\n\nWhen you use EasyTracker, global configuration settings are managed using resources defined in XML. Create a file called `analytics.xml` in your project\u0027s `Resources/values` directory and add the following resources:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\" ?\u003e\n\u003cresources xmlns:tools=\"http://schemas.android.com/tools\" tools:ignore=\"TypographyDashes\"\u003e\n\t\u003c!--Replace placeholder ID with your tracking ID--\u003e\n\t\u003cstring name=\"ga_trackingId\"\u003eUA-XXXX-Y\u003c/string\u003e\n\n\t\u003c!--Enable automatic activity tracking--\u003e\n\t\u003cbool name=\"ga_autoActivityTracking\"\u003etrue\u003c/bool\u003e\n\n\t\u003c!--Enable automatic exception tracking--\u003e\n\t\u003cbool name=\"ga_reportUncaughtExceptions\"\u003etrue\u003c/bool\u003e\n\u003c/resources\u003e\n```\n\n**Important**: Do not encode dashes in the `ga_trackingId` string. Doing so will prevent you from seeing any data in your reports.\n\nSee the [analytics.xml parameters reference](https://developers.google.com/analytics/devguides/collection/android/parameters) for the complete list of parameters you can use to configure your implementation.\n\nCongratulations! Your Xamarin.Android app is now setup to send data to Google Analytics.\n\n## Next steps\n\nYou can do much more with Google Analytics, including measuring campaigns, in-app payments and transactions, and user interaction events. See the following Android developer guides to learn how to add these features to your implementation:\n\n* [Advanced Configuration](https://developers.google.com/analytics/devguides/collection/android/v3/advanced) – Learn more about advanced configuration options, including using multiple trackers.\n* [Measuring Campaigns](https://developers.google.com/analytics/devguides/collection/android/v3/campaigns) – Learn how to implement campaign measurement to understand which channels and campaigns are driving app installs.\n* [Measuring Events](https://developers.google.com/analytics/devguides/collection/android/v3/events) – Learn how to measure user engagement with interactive content like buttons, videos, and other media using Events.\n* [Measuring In-App Payments](https://developers.google.com/analytics/devguides/collection/android/v3/ecommerce) – Learn how to measure in-app payments and transactions.\n* [User timings](https://developers.google.com/analytics/devguides/collection/android/v3/usertimings) – Learn how to measure user timings in your app to measure load times, engagement with media, and more.\n* [Analytics.xml parameters](https://developers.google.com/analytics/devguides/collection/android/parameters.html) – See the complete list of `analytics.xml` configuration parameters.\n\n# More Resources\n\n* [Google Analytics Developer Portal](https://developers.google.com/analytics/devguides/collection/)\n\n\n###### The [original content material](https://developers.google.com/analytics/devguides/collection/) of this page is licensed under the [Creative Commons Attribution 3.0 License](http://creativecommons.org/licenses/by/3.0/) and has been adapted to match this page format.","Hash":"d85c0e714ee4eb458c7a11f6f24fd2cc","TargetPlatforms":["ios","android"],"TrialHash":null}